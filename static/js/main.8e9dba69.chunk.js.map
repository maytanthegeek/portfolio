{"version":3,"sources":["serviceWorker.ts","theme.ts","hooks/useResponsive.ts","assets/images/microservices.png","assets/images/data-lake.png","components/Cloud.tsx","hooks/useIntersectHook.ts","components/IntroTexts.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","lightTheme","responsiveFontSizes","createMuiTheme","palette","type","primary","main","grey","background","paper","darkTheme","useStyles","makeStyles","createStyles","title","flexGrow","useResponsive","theme","useTheme","matches","xs","useMediaQuery","breakpoints","up","sm","md","lg","xl","responsiveValues","findLast","breakpoint","keys","Cloud","projectSection","React","useRef","ref","useState","inView","triggered","entry","undefined","state","setState","observer","IntersectionObserver","entries","observerInstance","intersectionRatio","unobserve","current","threshold","rootMargin","useEffect","observe","useIntersect","projectVisible","fetchByMediaQuery","slideTimeout","Container","Grid","container","spacing","item","Slide","direction","in","mountOnEnter","unmountOnExit","timeout","Card","CardMedia","className","image","microservices","CardContent","Typography","variant","color","component","CardActions","disableSpacing","IconButton","aria-label","href","target","OpenInNew","datalake","IntroTexts","isFadeIn","setIsFadeIn","currentSlide","setCurrentSlide","setTimeout","slide","Math","ceil","App","darkState","setDarkState","classes","ThemeProvider","AppBar","position","Toolbar","onClick","BrightnessHigh","BrightnessLow","render","Wrapper","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e9dba69.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createMuiTheme, responsiveFontSizes, makeStyles, createStyles,\n} from '@material-ui/core/styles';\nimport { grey } from '@material-ui/core/colors';\n\n/**\n * Light Theme\n */\nexport const lightTheme = responsiveFontSizes(createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      main: grey[500],\n    },\n    background: {\n      paper: 'rgba(255,255,255,0.5)',\n    },\n  },\n}));\n\n/**\n * Dark Theme\n */\nexport const darkTheme = responsiveFontSizes(createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: grey[900],\n    },\n    background: {\n      paper: 'rgba(66, 66, 66, 0.4)',\n    },\n  },\n}));\n\nexport const useStyles = makeStyles(() => createStyles({\n  title: {\n    flexGrow: 1,\n  },\n}));\n","import { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { findLast } from 'ramda';\n\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n\ntype ResponsiveValues<P> = {\n  [key in Breakpoint]?: P\n}\n\nconst useResponsive = () => {\n  const theme = useTheme();\n\n  const matches = {\n    xs: useMediaQuery(theme.breakpoints.up('xs')),\n    sm: useMediaQuery(theme.breakpoints.up('sm')),\n    md: useMediaQuery(theme.breakpoints.up('md')),\n    lg: useMediaQuery(theme.breakpoints.up('lg')),\n    xl: useMediaQuery(theme.breakpoints.up('xl')),\n  };\n\n  return function fetchByMediaQuery<P>(responsiveValues: ResponsiveValues<P>) {\n    const match = findLast(\n      (breakpoint: Breakpoint) => matches[breakpoint] && responsiveValues[breakpoint] != null,\n      theme.breakpoints.keys,\n    );\n\n    return match && responsiveValues[match];\n  };\n};\n\nexport default useResponsive;\n","export default __webpack_public_path__ + \"static/media/microservices.882f3651.png\";","export default __webpack_public_path__ + \"static/media/data-lake.65b6ee4b.png\";","import './Cloud.css';\n\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Container,\n  IconButton,\n  Grid,\n  Slide,\n  Typography,\n} from '@material-ui/core';\nimport { OpenInNew as OpenInNewIcon } from '@material-ui/icons';\nimport React from 'react';\nimport useIntersect from '../hooks/useIntersectHook';\nimport useResponsive from '../hooks/useResponsive';\n\nimport microservices from '../assets/images/microservices.png';\nimport datalake from '../assets/images/data-lake.png';\n\nexport default function Cloud() {\n  const projectSection = React.useRef(null);\n  const [projectVisible] = useIntersect(projectSection);\n  const fetchByMediaQuery = useResponsive();\n\n  const slideTimeout = 2000;\n  return (\n    <div ref={projectSection}>\n    <Container>\n      <Grid container spacing={fetchByMediaQuery({ xs: 2, md: 5 })}>\n        <Grid item sm={12} md={4}>\n          <Slide direction=\"right\" in={projectVisible} mountOnEnter unmountOnExit timeout={slideTimeout}>\n            <Card>\n              <CardMedia className=\"project-media\" image={microservices} title=\"Microservices\" />\n              <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Packaged microservices as containers and deployed into a Kubernetes cluster. The\n                  cluster uses Istio service mesh and microservices communicate with each other\n                  over HTTP, gRPC or pubsub.\n              </Typography>\n              </CardContent>\n              <CardActions disableSpacing>\n                <IconButton\n                  aria-label=\"open project\"\n                  href=\"https://medium.com/@maytan.thegeek/deploying-microservices-on-eks-a-beginners-guide-part-1-1f6f20425802\"\n                  target=\"_blank\">\n                  <OpenInNewIcon />\n                </IconButton>\n              </CardActions>\n            </Card>\n          </Slide>\n        </Grid>\n        <Grid item sm={12} md={4}>\n          <Slide direction=\"up\" in={projectVisible} mountOnEnter unmountOnExit timeout={slideTimeout}>\n            <Card>\n            <CardMedia className=\"project-media\" image={datalake} title=\"Data Lake\" />\n              <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Setup a data lake for big data use cases with AWS S3. Implemented custom ETl\n                  jobs for high quality data availability. This solution is 15x cheaper than\n                  previously existing one with only a 15 min added latency.\n              </Typography>\n              </CardContent>\n              <CardActions disableSpacing>\n                <IconButton aria-label=\"open project\">\n                  <OpenInNewIcon />\n                </IconButton>\n              </CardActions>\n            </Card>\n          </Slide>\n        </Grid>\n        <Grid item sm={12} md={4}>\n          <Slide direction=\"down\" in={projectVisible} mountOnEnter unmountOnExit timeout={slideTimeout}>\n            <Card>\n              <CardMedia className=\"project-media\" image=\"../assets/images/me.jpg\" title=\"Device Fleet Provisioning\" />\n              <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Created Ansible enabled IoT device fleet with OTA update capabilities. The\n                  devices are edge controllers built on RaspberryPi and run multiple containers\n                  serving different applications.\n              </Typography>\n              </CardContent>\n              <CardActions disableSpacing>\n                <IconButton aria-label=\"open project\">\n                  <OpenInNewIcon />\n                </IconButton>\n              </CardActions>\n            </Card>\n          </Slide>\n        </Grid>\n      </Grid>\n    </Container>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport default function useIntersect(ref) {\n  // configure the state\n  const [state, setState] = useState({\n    inView: false,\n    triggered: false,\n    entry: undefined,\n  });\n\n  const observer = new IntersectionObserver(\n    (entries, observerInstance) => {\n      // checks to see if the element is intersecting\n      if (entries[0].intersectionRatio > 0) {\n        // if it is update the state, we set triggered as to not re-observe the element\n        setState({\n          inView: true,\n          triggered: true,\n          entry: observerInstance,\n        });\n        // unobserve the element\n        observerInstance.unobserve(ref.current);\n      }\n    },\n    {\n      threshold: 0,\n      rootMargin: '0%',\n    },\n  );\n\n  useEffect(() => {\n    // check that the element exists, and has not already been triggered\n    if (ref.current && !state.triggered) {\n      observer.observe(ref.current);\n    }\n  });\n\n  return [state.inView, state.entry];\n}\n","import './IntroTexts.css';\n\nimport React, { useState } from 'react';\n\nexport default function IntroTexts() {\n  const [isFadeIn, setIsFadeIn] = useState(true);\n  const [currentSlide, setCurrentSlide] = useState(0.5);\n\n  setTimeout(() => {\n    const slide = currentSlide + 0.5;\n    if (slide > 3) {\n      setCurrentSlide(0.5);\n    } else {\n      setCurrentSlide(slide);\n    }\n    setIsFadeIn(!isFadeIn);\n  }, 1500);\n\n  return (\n    <div>\n      { Math.ceil(currentSlide) === 1\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n            I AM TANMAY\n          </div>\n        : null\n      }\n      { Math.ceil(currentSlide) === 2\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n        I MAKE PROGRAMS LOOK GOOD\n      </div>\n        : null\n      }\n      { Math.ceil(currentSlide) === 3\n        ? <div className={ isFadeIn ? 'intro-text fadeIn' : 'intro-text fadeOut' }>\n        AND PERFORM A LITTLE BETTER\n      </div>\n        : null\n      }\n    </div>\n  );\n}\n","import ReactFullpage from '@fullpage/react-fullpage';\nimport {\n  AppBar, IconButton, ThemeProvider, Toolbar, Typography,\n} from '@material-ui/core';\nimport { BrightnessHigh, BrightnessLow } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { darkTheme, lightTheme, useStyles } from './theme';\nimport Cloud from './components/Cloud';\nimport IntroTexts from './components/IntroTexts';\nimport './App.css';\n\nexport default function App() {\n  const [darkState, setDarkState] = useState(true);\n  const classes = useStyles();\n\n  const handleThemeChange = () => {\n    setDarkState(!darkState);\n  };\n\n  return (\n    <ThemeProvider theme={darkState ? darkTheme : lightTheme}>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            My Home\n          </Typography>\n          <IconButton onClick={handleThemeChange}>\n            {darkState ? <BrightnessHigh /> : <BrightnessLow />}\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <ReactFullpage\n        render={() => (\n          <ReactFullpage.Wrapper>\n            <div className=\"section banner home\">\n              <IntroTexts />\n            </div>\n            <div className=\"section banner section-1\">\n              <Cloud />\n            </div>\n            <div className=\"section banner section-2\" />\n            <div className=\"section banner foot\" />\n          </ReactFullpage.Wrapper>\n        )}\n      />\n    </ThemeProvider>\n  );\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}